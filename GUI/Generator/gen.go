// This program generates html.go/css.go. It can be invoked by running
// This package is way to have the best performance aspect, however the `go generate` should only run one time,
// so I choose to have a more readable file. The `go generate` creates the code, so is important to anyone understand
// what generated.

// go generate
package main

import (
	"github.com/brokenbydefault/Nanollet/Util"
	"github.com/kib357/less-go"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"github.com/brokenbydefault/Nanollet/Storage"
)

func main() {
	generateSciter()
	generateLESS()
	generateHTML()
	generateCSS()
}

var sciterTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// +build {{.OS}}

package Front

var Sciter = []byte{ {{.Data}} }
`))

type sciterStruct struct {
	OS   string
	File string
	Data string
}

func generateSciter() {
	structs := []sciterStruct{
		{"darwin", "sciter-osx-64.dylib", ""},
		{"windows", "sciter.dll", ""},
		{"linux", "libsciter-gtk.so", ""},
	}

	for _, strc := range structs {
		bin, _ := ioutil.ReadFile(strc.File)

		hex := Util.UnsafeHexEncode(bin)

		bindata := make([]byte, len(bin)*5)
		isciter := 0
		for i := 0; i < len(hex); i += 2 {
			copy(bindata[isciter:], []byte{0x30, 0x78, hex[i], hex[i+1], 0x2C})
			isciter += 5
		}

		strc.Data = string(bindata)
		if strc.Data == "" {
			panic("invalid sciter linking")
		}

		store, _ := os.Create("GUI/Front/sciter_" + strc.OS + ".go")
		sciterTemplate.Execute(store, strc)
	}
}

func generateLESS() {
	err := less.RenderFile("GUI/Front/less/style.less", "GUI/Front/css/style.css", map[string]interface{}{"compress": true})
	if err != nil {
		panic(err)
	}
}

var cssTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// +build !js

package Front

{{if .IsDebug}}
import "github.com/brokenbydefault/Nanollet/Util"
{{end}}

var CSSStyle = {{.Data}}
`))

type cssStruct struct {
	IsDebug bool
	Data    string
}

func generateCSS() {
	strc := cssStruct{}
	strc.IsDebug = Storage.Configuration.DebugStatus

	// If debug is enable the Nanollet will read the file directly, making possible to change the HTML/CSS without
	// need to `go generate` again.
	if strc.IsDebug {
		strc.Data = `Util.FileToString("GUI/Front/css/style.css")`
	} else {
		strc.Data = "`" + Util.FileToString("GUI/Front/css/style.css") + "`"
	}

	store, _ := os.Create("GUI/Front/css.go")
	cssTemplate.Execute(store, strc)
}

var htmlTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// +build !js

package Front

{{if .IsDebug}}
import "github.com/brokenbydefault/Nanollet/Util"
{{end}}

{{- range .HTML}}
var HTML{{.Name}} = HTMLPAGE({{.Data}})
{{- end}}
`))

type pageStruct struct {
	Data string
	Name string
}
type htmlStruct struct {
	IsDebug bool
	HTML    []pageStruct
}

func generateHTML() {
	strc := htmlStruct{}
	strc.IsDebug = Storage.Configuration.DebugStatus

	pages, _ := filepath.Glob("GUI/Front/html/*")
	for _, path := range pages {
		page := pageStruct{}
		page.Name = strings.Title(strings.Replace(filepath.Base(path), ".html", "", 1))

		// If debug is enable the Nanollet will read the file directly, making possible to change the HTML/CSS without
		// need to `go generate` again.
		if strc.IsDebug {
			page.Data = `Util.FileToString("` + filepath.ToSlash(path) + `")`
		} else {
			page.Data = "`" + Util.FileToString(path) + "`"
		}

		strc.HTML = append(strc.HTML, page)
	}

	store, _ := os.Create("GUI/Front/html.go")
	htmlTemplate.Execute(store, strc)
}
