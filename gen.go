// +build ignore
// This program generates html.go/css.go. It can be invoked by running
// go generate
package main

import (
	"path/filepath"

	"strings"
	"io/ioutil"
	"os"
	"github.com/kib357/less-go"
)

func main() {

	err := less.RenderFile("GUI/Front/less/style.less", "GUI/Front/css/style.css", map[string]interface{}{"compress": true})
	if err != nil {
		panic(err)
	}

	os.Create("GUI/Front/html.go")

	f, err := os.OpenFile("GUI/Front/html.go", os.O_APPEND|os.O_WRONLY, 0600)
	if err != nil {
		panic(err)
	}

	_, err = f.WriteString("// Code generated by go generate; DO NOT EDIT. \npackage Front \n\ntype HTMLPAGE string\n\n");
	if err != nil {
		panic(err)
	}

	gb, err := filepath.Glob("GUI/Front/html/*")
	if err != nil {
		panic(err)
	}

	for _, v := range gb {
		html, err := ioutil.ReadFile(v)
		if err != nil {
			panic(err)
		}

		name := strings.Split(v, "\\")
		name = strings.Split(name[len(name) - 1], ".")

		_, err = f.WriteString("const HTML" + strings.Title(name[0]) + " HTMLPAGE = `" + string(html) + "` \n");
		if err != nil {
			panic(err)
		}
	}


	os.Create("GUI/Front/css.go")

	f, err = os.OpenFile("GUI/Front/css.go", os.O_APPEND|os.O_WRONLY, 0600)
	if err != nil {
		panic(err)
	}

	_, err = f.WriteString("// Code generated by go generate; DO NOT EDIT. \npackage Front \n\n");
	if err != nil {
		panic(err)
	}

	css, err := ioutil.ReadFile("GUI/Front/css/style.css")
	if err != nil {
		panic(err)
	}

	_, err = f.WriteString("const CSSStyle = `" + string(css) + "` \n");
	if err != nil {
		panic(err)
	}

}
